import { logger } from './logger';

const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
const PERPLEXITY_API_URL = 'https://api.perplexity.ai/chat/completions';

export interface AIMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface AIResponse {
  content: string;
  suggestions?: string[];
  error?: string;
}

interface Dish {
  id: string;
  ten_mon_an: string;
  loai_mon_an?: string;
  ingredients?: Array<{
    name: string;
    so_luong?: number;
    don_vi?: string;
  }>;
}

interface Ingredient {
  id: string;
  ten_nguyen_lieu: string;
  ton_kho_so_luong?: number | string;
  ton_kho_khoi_luong?: number | string;
}

interface RecipeData {
  dishName: string;
  ingredients: Array<{
    name: string;
    quantity: number;
    unit: string;
  }>;
}

export class AIService {
  private static instance: AIService;
  
  private constructor() {}
  
  public static getInstance(): AIService {
    if (!AIService.instance) {
      AIService.instance = new AIService();
    }
    return AIService.instance;
  }

  private async callPerplexityAPI(messages: AIMessage[]): Promise<string> {
    try {
      const response = await fetch(PERPLEXITY_API_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'llama-3.1-sonar-small-128k-online',
          messages: messages,
          max_tokens: 1000,
          temperature: 0.7,
          top_p: 0.9,
        }),
      });

      if (!response.ok) {
        throw new Error(`Perplexity API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      return data.choices[0]?.message?.content || 'Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi t·ª´ AI.';
    } catch (error) {
      logger.error('Error calling Perplexity API:', error);
      throw error;
    }
  }

  // T·∫°o g·ª£i √Ω m√≥n ƒÉn d·ª±a tr√™n nguy√™n li·ªáu c√≥ s·∫µn
  async suggestDishesFromIngredients(availableIngredients: string[]): Promise<AIResponse> {
    try {
      // L·∫•y d·ªØ li·ªáu t·ª´ database
      const response = await fetch('/api/ai-data?type=ingredients');
      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.message || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu nguy√™n li·ªáu');
      }

      const { availableIngredients: dbIngredients, dishesByCategory } = await this.getDishesData();
      
      // S·ª≠ d·ª•ng nguy√™n li·ªáu t·ª´ database n·∫øu kh√¥ng c√≥ input
      const ingredients = availableIngredients.length > 0 ? availableIngredients : dbIngredients;
      
      if (ingredients.length === 0) {
        return {
          content: `‚ùå **Kh√¥ng c√≥ nguy√™n li·ªáu**\n\nHi·ªán t·∫°i kho kh√¥ng c√≥ nguy√™n li·ªáu n√†o ƒë·ªß d√πng ƒë·ªÉ n·∫•u ƒÉn.\n\n**G·ª£i √Ω:**\n‚Ä¢ Ki·ªÉm tra t·ªìn kho t·∫°i trang Storage\n‚Ä¢ Mua s·∫Øm nguy√™n li·ªáu c·∫ßn thi·∫øt\n‚Ä¢ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng nguy√™n li·ªáu`,
          suggestions: [
            'Ki·ªÉm tra t·ªìn kho',
            'Mua s·∫Øm nguy√™n li·ªáu',
            'C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng'
          ]
        };
      }

      // T√¨m m√≥n ƒÉn ph√π h·ª£p t·ª´ database
      const suitableDishes = await this.findSuitableDishes(ingredients, dishesByCategory);
      
      if (suitableDishes.length === 0) {
        return {
          content: `ü§î **Kh√¥ng t√¨m th·∫•y m√≥n ph√π h·ª£p**\n\nV·ªõi nguy√™n li·ªáu hi·ªán c√≥: ${ingredients.join(', ')}\n\n**G·ª£i √Ω:**\n‚Ä¢ Th√™m nguy√™n li·ªáu m·ªõi v√†o kho\n‚Ä¢ Ki·ªÉm tra c√°c m√≥n ƒÉn kh√°c\n‚Ä¢ T·∫°o c√¥ng th·ª©c m·ªõi`,
          suggestions: [
            'Th√™m nguy√™n li·ªáu m·ªõi',
            'Ki·ªÉm tra m√≥n ƒÉn kh√°c',
            'T·∫°o c√¥ng th·ª©c m·ªõi'
          ]
        };
      }

      // T·∫°o response t·ª´ d·ªØ li·ªáu th·ª±c
      let content = `üçΩÔ∏è **G·ª£i √Ω m√≥n ƒÉn t·ª´ nguy√™n li·ªáu c√≥ s·∫µn**\n\n`;
      content += `**Nguy√™n li·ªáu c√≥ s·∫µn:** ${ingredients.join(', ')}\n\n`;
      content += `**M√≥n ƒÉn ph√π h·ª£p:**\n\n`;

      suitableDishes.forEach((dish, index) => {
        content += `**${index + 1}. ${dish.name}**\n`;
        content += `‚Ä¢ Lo·∫°i: ${dish.category}\n`;
        content += `‚Ä¢ M√¥ t·∫£: ${dish.description || 'M√≥n ƒÉn ngon'}\n`;
        content += `‚Ä¢ Nguy√™n li·ªáu c·∫ßn: ${dish.ingredients.join(', ')}\n\n`;
      });

      content += `**üí° G·ª£i √Ω:**\n`;
      content += `‚Ä¢ Ch·ªçn m√≥n ph√π h·ª£p v·ªõi s·ªü th√≠ch\n`;
      content += `‚Ä¢ Ki·ªÉm tra ƒë·ªß nguy√™n li·ªáu tr∆∞·ªõc khi n·∫•u\n`;
      content += `‚Ä¢ C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh c√¥ng th·ª©c theo √Ω mu·ªën`;

      const suggestions = suitableDishes.map(dish => dish.name).slice(0, 5);

      return {
        content,
        suggestions
      };
    } catch (error) {
      logger.error('Error creating dish suggestions:', error);
      
      // Fallback response
      const ingredients = availableIngredients.length > 0 ? availableIngredients.join(', ') : 'ch∆∞a c√≥ th√¥ng tin';
      
      return {
        content: `D·ª±a tr√™n nguy√™n li·ªáu c√≥ s·∫µn: ${ingredients}\n\nT√¥i g·ª£i √Ω b·∫°n c√≥ th·ªÉ n·∫•u c√°c m√≥n sau:\n\n**1. C∆°m t·∫•m v·ªõi th·ªãt n∆∞·ªõng**\n- M√¥ t·∫£: M√≥n ƒÉn truy·ªÅn th·ªëng mi·ªÅn Nam\n- C√°ch ch·∫ø bi·∫øn: ∆Ø·ªõp th·ªãt v·ªõi gia v·ªã, n∆∞·ªõng v√†ng\n- Th·ªùi gian: 30 ph√∫t\n\n**2. Canh chua c√°**\n- M√¥ t·∫£: M√≥n canh chua ƒë·∫≠m ƒë√†\n- C√°ch ch·∫ø bi·∫øn: N·∫•u c√° v·ªõi c√† chua, d·ª©a\n- Th·ªùi gian: 20 ph√∫t\n\n**3. Rau mu·ªëng x√†o t·ªèi**\n- M√¥ t·∫£: M√≥n rau xanh gi√≤n\n- C√°ch ch·∫ø bi·∫øn: X√†o nhanh v·ªõi t·ªèi\n- Th·ªùi gian: 5 ph√∫t\n\n**4. Th·ªãt kho t√†u**\n- M√¥ t·∫£: Th·ªãt kho ƒë·∫≠m ƒë√†\n- C√°ch ch·∫ø bi·∫øn: Kho v·ªõi n∆∞·ªõc d·ª´a\n- Th·ªùi gian: 45 ph√∫t`,
        suggestions: [
          'C∆°m t·∫•m v·ªõi th·ªãt n∆∞·ªõng',
          'Canh chua c√°',
          'Rau mu·ªëng x√†o t·ªèi',
          'Th·ªãt kho t√†u'
        ],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // L·∫≠p k·∫ø ho·∫°ch b·ªØa ƒÉn theo tu·∫ßn
  async createWeeklyMealPlan(preferences: {
    dietaryRestrictions?: string[];
    favoriteCuisines?: string[];
    budget?: string;
    familySize?: number;
  }): Promise<AIResponse> {
    try {
      // L·∫•y d·ªØ li·ªáu t·ª´ database
      const dishesData = await this.getDishesData();
      const menuData = await this.getMenuData();
      
      const familySize = preferences.familySize || 4;
      const budget = preferences.budget || 'trung b√¨nh';
      
      // L·∫•y c√°c m√≥n ƒÉn c√≥ s·∫µn
      const availableDishes = dishesData.allDishes || [];
      
      if (availableDishes.length === 0) {
        return {
          content: `‚ùå **Kh√¥ng c√≥ m√≥n ƒÉn**\n\nHi·ªán t·∫°i ch∆∞a c√≥ m√≥n ƒÉn n√†o trong h·ªá th·ªëng.\n\n**G·ª£i √Ω:**\n‚Ä¢ Th√™m m√≥n ƒÉn m·ªõi t·∫°i trang Ingredients\n‚Ä¢ T·∫°o c√¥ng th·ª©c cho c√°c m√≥n ƒÉn\n‚Ä¢ C·∫≠p nh·∫≠t th√¥ng tin m√≥n ƒÉn`,
          suggestions: [
            'Th√™m m√≥n ƒÉn m·ªõi',
            'T·∫°o c√¥ng th·ª©c',
            'C·∫≠p nh·∫≠t th√¥ng tin'
          ]
        };
      }

      // T·∫°o k·∫ø ho·∫°ch t·ª´ d·ªØ li·ªáu th·ª±c
      let content = `üìÖ **K·∫ø ho·∫°ch b·ªØa ƒÉn tu·∫ßn**\n\n`;
      content += `**Th√¥ng tin:**\n‚Ä¢ S·ªë ng∆∞·ªùi: ${familySize}\n‚Ä¢ Ng√¢n s√°ch: ${budget}\n‚Ä¢ M√≥n c√≥ s·∫µn: ${availableDishes.length}\n\n`;
      
      // Ph√¢n chia m√≥n ƒÉn theo ng√†y
      const days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'];
      const mealsPerDay = ['S√°ng', 'Tr∆∞a', 'T·ªëi'];
      
      // Chia m√≥n ƒÉn th√†nh c√°c nh√≥m
      const dishGroups = this.groupDishesByCategory(availableDishes);
      
      content += `**K·∫ø ho·∫°ch chi ti·∫øt:**\n\n`;
      
      days.forEach((day, dayIndex) => {
        content += `**${day}:**\n`;
        mealsPerDay.forEach((meal, mealIndex) => {
          const dishIndex = (dayIndex * 3 + mealIndex) % availableDishes.length;
          const dish = availableDishes[dishIndex];
          content += `‚Ä¢ ${meal}: ${dish.ten_mon_an} (${dish.loai_mon_an || 'M√≥n ch√≠nh'})\n`;
        });
        content += `\n`;
      });

      content += `**üí° G·ª£i √Ω:**\n`;
      content += `‚Ä¢ ƒêi·ªÅu ch·ªânh m√≥n ƒÉn theo s·ªü th√≠ch\n`;
      content += `‚Ä¢ Ki·ªÉm tra nguy√™n li·ªáu tr∆∞·ªõc khi n·∫•u\n`;
      content += `‚Ä¢ C√≥ th·ªÉ thay ƒë·ªïi th·ª© t·ª± m√≥n ƒÉn\n`;
      content += `‚Ä¢ L∆∞u k·∫ø ho·∫°ch ƒë·ªÉ tham kh·∫£o sau`;

      const suggestions = availableDishes.slice(0, 7).map((dish: Dish) => 
        `${dish.ten_mon_an} (${dish.loai_mon_an || 'M√≥n ch√≠nh'})`
      );

      return {
        content,
        suggestions
      };
    } catch (error) {
      logger.error('Error creating weekly meal plan:', error);
      
      // Fallback response
      const familySize = preferences.familySize || 4;
      const budget = preferences.budget || 'trung b√¨nh';
      
      return {
        content: `K·∫ø ho·∫°ch b·ªØa ƒÉn tu·∫ßn cho ${familySize} ng∆∞·ªùi (ng√¢n s√°ch ${budget}):\n\n**Th·ª© 2:**\n- S√°ng: Ph·ªü b√≤ (15k/ng∆∞·ªùi)\n- Tr∆∞a: C∆°m v·ªõi th·ªãt kho, canh chua (25k/ng∆∞·ªùi)\n- T·ªëi: B√∫n b√≤ Hu·∫ø (20k/ng∆∞·ªùi)\n\n**Th·ª© 3:**\n- S√°ng: B√°nh m√¨ pate (10k/ng∆∞·ªùi)\n- Tr∆∞a: C∆°m v·ªõi c√° chi√™n, rau lu·ªôc (22k/ng∆∞·ªùi)\n- T·ªëi: Ch√°o g√† (18k/ng∆∞·ªùi)\n\n**Th·ª© 4:**\n- S√°ng: X√¥i ƒë·∫≠u xanh (12k/ng∆∞·ªùi)\n- Tr∆∞a: C∆°m v·ªõi th·ªãt n∆∞·ªõng, salad (28k/ng∆∞·ªùi)\n- T·ªëi: M√¨ Qu·∫£ng (25k/ng∆∞·ªùi)\n\n**Th·ª© 5:**\n- S√°ng: Ch√°o l√≤ng (15k/ng∆∞·ªùi)\n- Tr∆∞a: C∆°m v·ªõi t√¥m rang me, canh kh·ªï qua (30k/ng∆∞·ªùi)\n- T·ªëi: B√∫n ri√™u (22k/ng∆∞·ªùi)\n\n**Th·ª© 6:**\n- S√°ng: B√°nh cu·ªën (18k/ng∆∞·ªùi)\n- Tr∆∞a: C∆°m v·ªõi c√° kho t·ªô, rau mu·ªëng (25k/ng∆∞·ªùi)\n- T·ªëi: L·∫©u th√°i (35k/ng∆∞·ªùi)\n\n**Th·ª© 7:**\n- S√°ng: B√∫n b√≤ (20k/ng∆∞·ªùi)\n- Tr∆∞a: C∆°m v·ªõi g√† n∆∞·ªõng, rau c·ªß (32k/ng∆∞·ªùi)\n- T·ªëi: Pizza (40k/ng∆∞·ªùi)\n\n**Ch·ªß nh·∫≠t:**\n- S√°ng: Dimsum (25k/ng∆∞·ªùi)\n- Tr∆∞a: BBQ ngo√†i tr·ªùi (45k/ng∆∞·ªùi)\n- T·ªëi: C∆°m t·∫•m (20k/ng∆∞·ªùi)\n\n**T·ªïng chi ph√≠ ∆∞·ªõc t√≠nh:** ~1,200k/tu·∫ßn`,
        suggestions: [
          'Th·ª© 2: Ph·ªü b√≤ - Th·ªãt kho - B√∫n b√≤ Hu·∫ø',
          'Th·ª© 3: B√°nh m√¨ - C√° chi√™n - Ch√°o g√†',
          'Th·ª© 4: X√¥i ƒë·∫≠u - Th·ªãt n∆∞·ªõng - M√¨ Qu·∫£ng',
          'Th·ª© 5: Ch√°o l√≤ng - T√¥m rang me - B√∫n ri√™u',
          'Th·ª© 6: B√°nh cu·ªën - C√° kho t·ªô - L·∫©u th√°i',
          'Th·ª© 7: B√∫n b√≤ - G√† n∆∞·ªõng - Pizza',
          'Ch·ªß nh·∫≠t: Dimsum - BBQ - C∆°m t·∫•m'
        ],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // T·∫°o danh s√°ch mua s·∫Øm th√¥ng minh
  async createSmartShoppingList(menuItems: string[], currentInventory: string[]): Promise<AIResponse> {
    try {
      // L·∫•y d·ªØ li·ªáu shopping t·ª´ API
      const response = await fetch('/api/shopping');
      const shoppingData = await response.json();
      
      if (shoppingData.error) {
        throw new Error(shoppingData.message || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu shopping');
      }

      const { totalSources, totalIngredients, groupedBySource } = shoppingData;
      
      if (totalIngredients === 0) {
        return {
          content: `üéâ **Tin t·ªët!**\n\nKho c·ªßa b·∫°n hi·ªán t·∫°i ƒë√£ ƒë·ªß nguy√™n li·ªáu, kh√¥ng c·∫ßn mua th√™m g√¨ c·∫£!\n\n**T√¨nh tr·∫°ng kho:**\n‚Ä¢ T·∫•t c·∫£ nguy√™n li·ªáu ƒë·ªÅu ƒë·ªß d√πng\n‚Ä¢ Kh√¥ng c√≥ nguy√™n li·ªáu n√†o s·∫Øp h·∫øt\n‚Ä¢ C√≥ th·ªÉ ti·∫øp t·ª•c n·∫•u ƒÉn b√¨nh th∆∞·ªùng\n\n**G·ª£i √Ω:**\n‚Ä¢ Ki·ªÉm tra l·∫°i sau v√†i ng√†y\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch mua s·∫Øm cho tu·∫ßn t·ªõi\n‚Ä¢ T·∫≠n d·ª•ng nguy√™n li·ªáu hi·ªán c√≥ ƒë·ªÉ n·∫•u ƒÉn`,
          suggestions: [
            'Kho ƒë·ªß nguy√™n li·ªáu',
            'Kh√¥ng c·∫ßn mua s·∫Øm',
            'Ki·ªÉm tra l·∫°i sau v√†i ng√†y'
          ]
        };
      }

      // T·∫°o danh s√°ch mua s·∫Øm t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
      let content = `üõí **Danh s√°ch mua s·∫Øm th√¥ng minh**\n\n`;
      content += `**Th·ªëng k√™:**\n‚Ä¢ ${totalSources} ngu·ªìn nh·∫≠p\n‚Ä¢ ${totalIngredients} nguy√™n li·ªáu c·∫ßn mua\n\n`;
      
      content += `**Danh s√°ch theo ngu·ªìn:**\n\n`;
      
      for (const [source, ingredients] of Object.entries(groupedBySource)) {
        const ingredientList = ingredients as Ingredient[];
        content += `**üìç ${source}** (${ingredientList.length} m√≥n):\n`;
        ingredientList.forEach((ing: Ingredient) => {
          const qty = Number(ing.ton_kho_so_luong || 0);
          const wgt = Number(ing.ton_kho_khoi_luong || 0);
          const value = Math.max(qty, wgt);
          const status = value === 0 ? 'H·∫øt' : 'S·∫Øp h·∫øt';
          content += `‚Ä¢ ${ing.ten_nguyen_lieu} (${status})\n`;
        });
        content += `\n`;
      }

      content += `**üí° G·ª£i √Ω mua s·∫Øm:**\n`;
      content += `‚Ä¢ L√™n k·∫ø ho·∫°ch mua s·∫Øm theo t·ª´ng ngu·ªìn\n`;
      content += `‚Ä¢ ∆Øu ti√™n mua nh·ªØng m√≥n ƒë√£ h·∫øt tr∆∞·ªõc\n`;
      content += `‚Ä¢ C√≥ th·ªÉ mua s·ªë l∆∞·ª£ng l·ªõn ƒë·ªÉ ti·∫øt ki·ªám\n`;
      content += `‚Ä¢ Ki·ªÉm tra gi√° t·∫°i c√°c ngu·ªìn kh√°c nhau\n\n`;
      
      content += `**üì± S·ª≠ d·ª•ng:**\n`;
      content += `‚Ä¢ Truy c·∫≠p trang Shopping ƒë·ªÉ xem chi ti·∫øt\n`;
      content += `‚Ä¢ Sao ch√©p danh s√°ch ƒë·ªÉ mang ƒëi mua\n`;
      content += `‚Ä¢ ƒê√°nh d·∫•u ƒë√£ mua ƒë·ªÉ c·∫≠p nh·∫≠t kho`;

      const suggestions = Object.entries(groupedBySource).map(([source, ingredients]) => 
        `${source}: ${(ingredients as Ingredient[]).length} nguy√™n li·ªáu`
      ).slice(0, 5);

      return {
        content,
        suggestions
      };
    } catch (error) {
      logger.error('Error creating smart shopping list:', error);
      
      // Fallback response
      const menu = menuItems.length > 0 ? menuItems.join(', ') : 'ch∆∞a c√≥ th·ª±c ƒë∆°n';
      const inventory = currentInventory.length > 0 ? currentInventory.join(', ') : 'ch∆∞a c√≥ t·ªìn kho';
      
      return {
        content: `Danh s√°ch mua s·∫Øm th√¥ng minh:\n\n**Th·ª±c ƒë∆°n:** ${menu}\n**T·ªìn kho hi·ªán t·∫°i:** ${inventory}\n\n**C·∫ßn mua:**\n\n**Rau c·ªß:**\n‚Ä¢ Rau mu·ªëng: 2 b√≥ (15k)\n‚Ä¢ C√† chua: 1kg (25k)\n‚Ä¢ H√†nh t√¢y: 500g (10k)\n‚Ä¢ T·ªèi: 200g (8k)\n‚Ä¢ G·ª´ng: 100g (5k)\n\n**Th·ªãt c√°:**\n‚Ä¢ Th·ªãt ba ch·ªâ: 1kg (120k)\n‚Ä¢ C√° basa: 1kg (80k)\n‚Ä¢ Th·ªãt g√†: 1 con (60k)\n‚Ä¢ T√¥m: 500g (75k)\n\n**Gia v·ªã:**\n‚Ä¢ N∆∞·ªõc m·∫Øm: 1 chai (35k)\n‚Ä¢ ƒê∆∞·ªùng: 500g (12k)\n‚Ä¢ Mu·ªëi: 1 g√≥i (5k)\n‚Ä¢ D·∫ßu ƒÉn: 1 chai (25k)\n‚Ä¢ H·∫°t n√™m: 1 g√≥i (15k)\n\n**Kh√°c:**\n‚Ä¢ G·∫°o: 5kg (50k)\n‚Ä¢ M√¨ g√≥i: 10 g√≥i (30k)\n‚Ä¢ Tr·ª©ng: 30 qu·∫£ (45k)\n\n**T·ªïng chi ph√≠ ∆∞·ªõc t√≠nh:** ~600k\n\n**G·ª£i √Ω mua s·∫Øm:**\n‚Ä¢ Si√™u th·ªã Big C: Gi√° t·ªët cho th·ªãt c√°\n‚Ä¢ Ch·ª£ ƒë·ªãa ph∆∞∆°ng: Rau c·ªß t∆∞∆°i\n‚Ä¢ VinMart: Gia v·ªã v√† ƒë·ªì kh√¥`,
        suggestions: [
          'Rau mu·ªëng: 2 b√≥ (15k)',
          'Th·ªãt ba ch·ªâ: 1kg (120k)',
          'C√° basa: 1kg (80k)',
          'N∆∞·ªõc m·∫Øm: 1 chai (35k)',
          'G·∫°o: 5kg (50k)'
        ],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // T·∫°o c√¥ng th·ª©c n·∫•u ƒÉn chi ti·∫øt
  async generateRecipe(dishName: string, ingredients: string[]): Promise<AIResponse> {
    try {
      // L·∫•y d·ªØ li·ªáu c√¥ng th·ª©c t·ª´ database
      const response = await fetch('/api/ai-data?type=recipes');
      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.message || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu c√¥ng th·ª©c');
      }

      // T√¨m c√¥ng th·ª©c cho m√≥n ƒÉn
      const recipe = (Object.values(data.recipesByDish) as RecipeData[]).find((dish: RecipeData) => 
        dish.dishName.toLowerCase().includes(dishName.toLowerCase()) ||
        dishName.toLowerCase().includes(dish.dishName.toLowerCase())
      );

      if (!recipe) {
        return {
          content: `‚ùå **Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c**\n\nKh√¥ng t√¨m th·∫•y c√¥ng th·ª©c cho m√≥n "${dishName}" trong h·ªá th·ªëng.\n\n**G·ª£i √Ω:**\n‚Ä¢ Ki·ªÉm tra t√™n m√≥n ƒÉn\n‚Ä¢ Th√™m c√¥ng th·ª©c m·ªõi\n‚Ä¢ Xem c√°c m√≥n ƒÉn c√≥ s·∫µn`,
          suggestions: [
            'Ki·ªÉm tra t√™n m√≥n ƒÉn',
            'Th√™m c√¥ng th·ª©c m·ªõi',
            'Xem m√≥n ƒÉn c√≥ s·∫µn'
          ]
        };
      }

      // T·∫°o c√¥ng th·ª©c t·ª´ d·ªØ li·ªáu th·ª±c
      let content = `üë®‚Äçüç≥ **C√¥ng th·ª©c: ${recipe.dishName}**\n\n`;
      
      content += `**Nguy√™n li·ªáu:**\n`;
      recipe.ingredients.forEach((ingredient: { name: string; quantity: number; unit: string }, index: number) => {
        content += `${index + 1}. ${ingredient.name}: ${ingredient.quantity} ${ingredient.unit}\n`;
      });

      content += `\n**C√°ch l√†m:**\n\n`;
      content += `**B∆∞·ªõc 1:** Chu·∫©n b·ªã nguy√™n li·ªáu\n`;
      content += `- R·ª≠a s·∫°ch v√† c·∫Øt th√°i ph√π h·ª£p\n`;
      content += `- Chu·∫©n b·ªã gia v·ªã c·∫ßn thi·∫øt\n\n`;
      
      content += `**B∆∞·ªõc 2:** Ch·∫ø bi·∫øn\n`;
      content += `- ∆Ø·ªõp gia v·ªã theo c√¥ng th·ª©c\n`;
      content += `- Ch·∫ø bi·∫øn theo t·ª´ng b∆∞·ªõc\n\n`;
      
      content += `**B∆∞·ªõc 3:** Ho√†n thi·ªán\n`;
      content += `- N·∫øm v√† ƒëi·ªÅu ch·ªânh gia v·ªã\n`;
      content += `- Trang tr√≠ ƒë·∫πp m·∫Øt\n\n`;

      content += `**Th·ªùi gian:** 30-45 ph√∫t\n`;
      content += `**ƒê·ªô kh√≥:** Trung b√¨nh\n`;
      content += `**S·ªë ph·∫ßn:** 4 ng∆∞·ªùi\n\n`;

      content += `**üí° M·∫πo n·∫•u ƒÉn:**\n`;
      content += `‚Ä¢ Chu·∫©n b·ªã nguy√™n li·ªáu tr∆∞·ªõc khi n·∫•u\n`;
      content += `‚Ä¢ ƒêi·ªÅu ch·ªânh l·ª≠a ph√π h·ª£p\n`;
      content += `‚Ä¢ N·∫øm th·ª≠ trong qu√° tr√¨nh n·∫•u\n`;
      content += `‚Ä¢ Trang tr√≠ ƒë·∫πp m·∫Øt ƒë·ªÉ tƒÉng h∆∞∆°ng v·ªã`;

      const suggestions = [
        'B∆∞·ªõc 1: Chu·∫©n b·ªã nguy√™n li·ªáu',
        'B∆∞·ªõc 2: ∆Ø·ªõp gia v·ªã',
        'B∆∞·ªõc 3: Ch·∫ø bi·∫øn',
        'B∆∞·ªõc 4: Ho√†n thi·ªán',
        'M·∫πo: ƒêi·ªÅu ch·ªânh gia v·ªã'
      ];

      return {
        content,
        suggestions
      };
    } catch (error) {
      logger.error('Error generating recipe:', error);
      
      // Fallback response
      const dish = dishName || 'Th·ªãt kho t√†u';
      const availableIngredients = ingredients.length > 0 ? ingredients.join(', ') : 'th·ªãt ba ch·ªâ, tr·ª©ng, n∆∞·ªõc d·ª´a';
      
      return {
        content: `**C√¥ng th·ª©c: ${dish}**\n\n**Nguy√™n li·ªáu:**\n‚Ä¢ Th·ªãt ba ch·ªâ: 500g\n‚Ä¢ Tr·ª©ng: 6 qu·∫£\n‚Ä¢ N∆∞·ªõc d·ª´a: 1 tr√°i\n‚Ä¢ H√†nh t√≠m: 2 c·ªß\n‚Ä¢ T·ªèi: 3 t√©p\n‚Ä¢ N∆∞·ªõc m·∫Øm: 3 mu·ªóng canh\n‚Ä¢ ƒê∆∞·ªùng: 2 mu·ªóng canh\n‚Ä¢ H·∫°t n√™m: 1 mu·ªóng c√† ph√™\n‚Ä¢ Ti√™u: 1/2 mu·ªóng c√† ph√™\n\n**C√°ch l√†m:**\n\n**B∆∞·ªõc 1:** Chu·∫©n b·ªã nguy√™n li·ªáu\n- Th·ªãt ba ch·ªâ c·∫Øt mi·∫øng vu√¥ng 3x3cm\n- Tr·ª©ng lu·ªôc ch√≠n, b√≥c v·ªè\n- H√†nh t√≠m, t·ªèi bƒÉm nh·ªè\n\n**B∆∞·ªõc 2:** ∆Ø·ªõp th·ªãt\n- ∆Ø·ªõp th·ªãt v·ªõi n∆∞·ªõc m·∫Øm, ƒë∆∞·ªùng, h·∫°t n√™m, ti√™u\n- ƒê·ªÉ 15 ph√∫t cho th·∫•m gia v·ªã\n\n**B∆∞·ªõc 3:** Kho th·ªãt\n- Cho th·ªãt v√†o n·ªìi, ƒë·ªï n∆∞·ªõc d·ª´a ng·∫≠p m·∫∑t\n- ƒêun s√¥i, h·∫° l·ª≠a nh·ªè kho 30 ph√∫t\n- Th√™m tr·ª©ng v√†o kho th√™m 15 ph√∫t\n\n**B∆∞·ªõc 4:** Ho√†n thi·ªán\n- N√™m n·∫øm l·∫°i cho v·ª´a ƒÉn\n- Kho ƒë·∫øn khi n∆∞·ªõc c·∫°n, th·ªãt m·ªÅm\n- R·∫Øc h√†nh t√≠m, t·ªèi bƒÉm l√™n tr√™n\n\n**Th·ªùi gian:** 60 ph√∫t\n**ƒê·ªô kh√≥:** Trung b√¨nh\n**S·ªë ph·∫ßn:** 4 ng∆∞·ªùi\n\n**M·∫πo:**\n‚Ä¢ D√πng n∆∞·ªõc d·ª´a t∆∞∆°i s·∫Ω ngon h∆°n\n‚Ä¢ Kho l·ª≠a nh·ªè ƒë·ªÉ th·ªãt m·ªÅm\n‚Ä¢ C√≥ th·ªÉ th√™m c√† r·ªët, khoai t√¢y`,
        suggestions: [
          'B∆∞·ªõc 1: Chu·∫©n b·ªã nguy√™n li·ªáu',
          'B∆∞·ªõc 2: ∆Ø·ªõp th·ªãt 15 ph√∫t',
          'B∆∞·ªõc 3: Kho th·ªãt 30 ph√∫t',
          'B∆∞·ªõc 4: Th√™m tr·ª©ng kho 15 ph√∫t',
          'Ho√†n thi·ªán: N√™m n·∫øm v√† trang tr√≠'
        ],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // Chat t·ªïng qu√°t v·ªÅ qu·∫£n l√Ω menu
  async chatAboutMenuManagement(message: string, context?: {
    currentMenu?: string[];
    availableIngredients?: string[];
    dietaryPreferences?: string[];
  }): Promise<AIResponse> {
    try {
      // L·∫•y d·ªØ li·ªáu t·ª´ database ƒë·ªÉ tr·∫£ l·ªùi
      const ingredientsData = await fetch('/api/ai-data?type=ingredients').then(res => res.json());
      const dishesData = await fetch('/api/ai-data?type=dishes').then(res => res.json());
      const menuData = await fetch('/api/ai-data?type=menu').then(res => res.json());

      const lowerMessage = message.toLowerCase();
      
      if (lowerMessage.includes('g·ª£i √Ω') || lowerMessage.includes('m√≥n ƒÉn')) {
        const availableIngredients = context?.availableIngredients || ingredientsData.availableIngredients || [];
        const suitableDishes = await this.findSuitableDishes(availableIngredients, dishesData.dishesByCategory);
        
        if (suitableDishes.length > 0) {
          return {
            content: `D·ª±a tr√™n nguy√™n li·ªáu c√≥ s·∫µn: ${availableIngredients.join(', ')}, t√¥i g·ª£i √Ω b·∫°n c√≥ th·ªÉ n·∫•u:\n\n${suitableDishes.map((dish, index) => `${index + 1}. ${dish.name} (${dish.category})`).join('\n')}\n\nB·∫°n c√≥ mu·ªën t√¥i t·∫°o c√¥ng th·ª©c chi ti·∫øt cho m√≥n n√†o kh√¥ng?`,
            suggestions: suitableDishes.map(dish => dish.name).slice(0, 4)
          };
        } else {
          return {
            content: `D·ª±a tr√™n nguy√™n li·ªáu c√≥ s·∫µn: ${availableIngredients.join(', ')}, t√¥i g·ª£i √Ω b·∫°n c√≥ th·ªÉ n·∫•u:\n\n‚Ä¢ C∆°m t·∫•m v·ªõi th·ªãt n∆∞·ªõng\n‚Ä¢ Canh chua c√°\n‚Ä¢ Rau mu·ªëng x√†o t·ªèi\n‚Ä¢ Th·ªãt kho t√†u\n\nB·∫°n c√≥ mu·ªën t√¥i t·∫°o c√¥ng th·ª©c chi ti·∫øt cho m√≥n n√†o kh√¥ng?`,
            suggestions: ['C∆°m t·∫•m v·ªõi th·ªãt n∆∞·ªõng', 'Canh chua c√°', 'Rau mu·ªëng x√†o t·ªèi', 'Th·ªãt kho t√†u']
          };
        }
      }
      
      if (lowerMessage.includes('k·∫ø ho·∫°ch') || lowerMessage.includes('tu·∫ßn')) {
        const availableDishes = dishesData.allDishes || [];
        const days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'];
        const mealsPerDay = ['S√°ng', 'Tr∆∞a', 'T·ªëi'];
        
        let content = `T√¥i s·∫Ω gi√∫p b·∫°n l·∫≠p k·∫ø ho·∫°ch b·ªØa ƒÉn cho tu·∫ßn n√†y:\n\n`;
        
        days.forEach((day, dayIndex) => {
          content += `**${day}:**\n`;
          mealsPerDay.forEach((meal, mealIndex) => {
            const dishIndex = (dayIndex * 3 + mealIndex) % availableDishes.length;
            const dish = availableDishes[dishIndex];
            content += `- ${meal}: ${dish.ten_mon_an} (${dish.loai_mon_an || 'M√≥n ch√≠nh'})\n`;
          });
          content += `\n`;
        });
        
        content += `B·∫°n c√≥ mu·ªën t√¥i ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch n√†y kh√¥ng?`;
        
        return {
          content,
          suggestions: ['ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch', 'Th√™m m√≥n m·ªõi', 'Xem c√¥ng th·ª©c', 'L∆∞u k·∫ø ho·∫°ch']
        };
      }
      
      if (lowerMessage.includes('mua s·∫Øm') || lowerMessage.includes('shopping')) {
        const lowStockIngredients = ingredientsData.lowStockIngredients || [];
        const outOfStockIngredients = ingredientsData.outOfStockIngredients || [];
        
        let content = `D·ª±a tr√™n t√¨nh tr·∫°ng kho hi·ªán t·∫°i, b·∫°n c·∫ßn mua:\n\n`;
        
        if (outOfStockIngredients.length > 0) {
          content += `**C·∫ßn mua ngay (h·∫øt h√†ng):**\n`;
          outOfStockIngredients.forEach((ingredient: string) => {
            content += `‚Ä¢ ${ingredient}\n`;
          });
          content += `\n`;
        }
        
        if (lowStockIngredients.length > 0) {
          content += `**S·∫Øp h·∫øt (c·∫ßn b·ªï sung):**\n`;
          lowStockIngredients.forEach((ingredient: string) => {
            content += `‚Ä¢ ${ingredient}\n`;
          });
          content += `\n`;
        }
        
        content += `B·∫°n c√≥ mu·ªën t√¥i t·∫°o danh s√°ch chi ti·∫øt h∆°n kh√¥ng?`;
        
        return {
          content,
          suggestions: ['T·∫°o danh s√°ch chi ti·∫øt', 'Ki·ªÉm tra t·ªìn kho', 'Mua s·∫Øm online', 'L∆∞u danh s√°ch']
        };
      }
      
      if (lowerMessage.includes('c√¥ng th·ª©c') || lowerMessage.includes('n·∫•u')) {
        const availableDishes = dishesData.allDishes || [];
        const dishSuggestions = availableDishes.slice(0, 4).map((dish: Dish) => dish.ten_mon_an);
        
        return {
          content: `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√¥ng th·ª©c n·∫•u ƒÉn chi ti·∫øt. B·∫°n mu·ªën n·∫•u m√≥n g√¨?\n\nM·ªôt s·ªë g·ª£i √Ω t·ª´ h·ªá th·ªëng:\n${dishSuggestions.map((dishName: string, index: number) => `${index + 1}. ${dishName}`).join('\n')}\n\nH√£y cho t√¥i bi·∫øt m√≥n b·∫°n mu·ªën n·∫•u, t√¥i s·∫Ω t·∫°o c√¥ng th·ª©c t·ª´ng b∆∞·ªõc cho b·∫°n!`,
          suggestions: dishSuggestions
        };
      }
      
      // Default response v·ªõi th√¥ng tin t·ª´ database
      const availableCount = ingredientsData.available || 0;
      const totalDishes = dishesData.total || 0;
      const totalMenuItems = menuData.total || 0;
      
      return {
        content: `Xin ch√†o! T√¥i l√† AI Assistant chuy√™n v·ªÅ qu·∫£n l√Ω menu v√† l·∫≠p k·∫ø ho·∫°ch b·ªØa ƒÉn.\n\n**T√¨nh tr·∫°ng hi·ªán t·∫°i:**\n‚Ä¢ Nguy√™n li·ªáu c√≥ s·∫µn: ${availableCount} lo·∫°i\n‚Ä¢ M√≥n ƒÉn trong h·ªá th·ªëng: ${totalDishes} m√≥n\n‚Ä¢ M√≥n trong menu: ${totalMenuItems} m√≥n\n\n**T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**\n‚Ä¢ G·ª£i √Ω m√≥n ƒÉn t·ª´ nguy√™n li·ªáu c√≥ s·∫µn\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch b·ªØa ƒÉn cho c·∫£ tu·∫ßn\n‚Ä¢ T·∫°o danh s√°ch mua s·∫Øm th√¥ng minh\n‚Ä¢ T·∫°o c√¥ng th·ª©c n·∫•u ƒÉn chi ti·∫øt\n\nB·∫°n mu·ªën t√¥i gi√∫p g√¨ h√¥m nay?`,
        suggestions: ['G·ª£i √Ω m√≥n ƒÉn', 'L·∫≠p k·∫ø ho·∫°ch tu·∫ßn', 'T·∫°o danh s√°ch mua s·∫Øm', 'T·∫°o c√¥ng th·ª©c']
      };
    } catch (error) {
      logger.error('Error in chat:', error);
      
      // Fallback response
      const lowerMessage = message.toLowerCase();
      
      if (lowerMessage.includes('g·ª£i √Ω') || lowerMessage.includes('m√≥n ƒÉn')) {
        return {
          content: `D·ª±a tr√™n nguy√™n li·ªáu c√≥ s·∫µn: ${context?.availableIngredients?.join(', ') || 'ch∆∞a c√≥ th√¥ng tin'}, t√¥i g·ª£i √Ω b·∫°n c√≥ th·ªÉ n·∫•u:\n\n‚Ä¢ C∆°m t·∫•m v·ªõi th·ªãt n∆∞·ªõng\n‚Ä¢ Canh chua c√°\n‚Ä¢ Rau mu·ªëng x√†o t·ªèi\n‚Ä¢ Th·ªãt kho t√†u\n\nB·∫°n c√≥ mu·ªën t√¥i t·∫°o c√¥ng th·ª©c chi ti·∫øt cho m√≥n n√†o kh√¥ng?`,
          suggestions: ['C∆°m t·∫•m v·ªõi th·ªãt n∆∞·ªõng', 'Canh chua c√°', 'Rau mu·ªëng x√†o t·ªèi', 'Th·ªãt kho t√†u']
        };
      }
      
      return {
        content: `Xin ch√†o! T√¥i l√† AI Assistant chuy√™n v·ªÅ qu·∫£n l√Ω menu v√† l·∫≠p k·∫ø ho·∫°ch b·ªØa ƒÉn. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ G·ª£i √Ω m√≥n ƒÉn t·ª´ nguy√™n li·ªáu c√≥ s·∫µn\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch b·ªØa ƒÉn cho c·∫£ tu·∫ßn\n‚Ä¢ T·∫°o danh s√°ch mua s·∫Øm th√¥ng minh\n‚Ä¢ T·∫°o c√¥ng th·ª©c n·∫•u ƒÉn chi ti·∫øt\n\nB·∫°n mu·ªën t√¥i gi√∫p g√¨ h√¥m nay?`,
        suggestions: ['G·ª£i √Ω m√≥n ƒÉn', 'L·∫≠p k·∫ø ho·∫°ch tu·∫ßn', 'T·∫°o danh s√°ch mua s·∫Øm', 'T·∫°o c√¥ng th·ª©c'],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // Helper methods ƒë·ªÉ l√†m vi·ªác v·ªõi database
  private async getDishesData() {
    const response = await fetch('/api/ai-data?type=dishes');
    const data = await response.json();
    
    if (data.error) {
      throw new Error(data.message || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu m√≥n ƒÉn');
    }
    
    return data;
  }

  private async getMenuData() {
    const response = await fetch('/api/ai-data?type=menu');
    const data = await response.json();
    
    if (data.error) {
      throw new Error(data.message || 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu menu');
    }
    
    return data;
  }

  private groupDishesByCategory(dishes: Dish[]) {
    return dishes.reduce((acc: Record<string, Dish[]>, dish: Dish) => {
      const category = dish.loai_mon_an || 'Kh√°c';
      if (!acc[category]) {
        acc[category] = [];
      }
      acc[category].push(dish);
      return acc;
    }, {});
  }

  private async findSuitableDishes(ingredients: string[], dishesByCategory: Record<string, Dish[]>) {
    // L·∫•y d·ªØ li·ªáu c√¥ng th·ª©c ƒë·ªÉ t√¨m m√≥n ph√π h·ª£p
    const response = await fetch('/api/ai-data?type=recipes');
    const data = await response.json();
    
    if (data.error) {
      return [];
    }

    const suitableDishes = [];
    
    // T√¨m m√≥n ƒÉn c√≥ nguy√™n li·ªáu ph√π h·ª£p
    for (const [dishId, recipe] of Object.entries(data.recipesByDish)) {
      const dish = recipe as RecipeData;
      const requiredIngredients = dish.ingredients?.map((ing: { name: string }) => ing.name.toLowerCase()) || [];
      
      // Ki·ªÉm tra xem c√≥ ƒë·ªß nguy√™n li·ªáu kh√¥ng
      const availableIngredientsLower = ingredients.map(ing => ing.toLowerCase());
      const hasEnoughIngredients = requiredIngredients.every((reqIng: string) => 
        availableIngredientsLower.some(availIng => 
          availIng.includes(reqIng) || reqIng.includes(availIng)
        )
      );
      
      if (hasEnoughIngredients) {
        suitableDishes.push({
          name: dish.dishName,
          category: 'M√≥n ƒÉn',
          description: 'M√≥n ƒÉn ngon t·ª´ nguy√™n li·ªáu c√≥ s·∫µn',
          ingredients: requiredIngredients
        });
      }
    }
    
    return suitableDishes.slice(0, 5); // Gi·ªõi h·∫°n 5 m√≥n
  }

  // Helper methods ƒë·ªÉ extract th√¥ng tin t·ª´ response
  private extractDishSuggestions(content: string): string[] {
    const suggestions: string[] = [];
    const lines = content.split('\n');
    
    for (const line of lines) {
      if (line.includes('m√≥n') || line.includes('ƒÉn') || line.includes(':')) {
        const cleanLine = line.replace(/^\d+\.?\s*/, '').replace(/^[-*]\s*/, '').trim();
        if (cleanLine.length > 10) {
          suggestions.push(cleanLine);
        }
      }
    }
    
    return suggestions.slice(0, 5); // Limit to 5 suggestions
  }

  private extractMealPlanSuggestions(content: string): string[] {
    const suggestions: string[] = [];
    const days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'];
    
    for (const day of days) {
      if (content.includes(day)) {
        suggestions.push(`${day}: ${content.split(day)[1]?.split('\n')[0] || ''}`);
      }
    }
    
    return suggestions;
  }

  private extractShoppingListItems(content: string): string[] {
    const items: string[] = [];
    const lines = content.split('\n');
    
    for (const line of lines) {
      if (line.includes('kg') || line.includes('g') || line.includes('c√°i') || line.includes('b√≥')) {
        const cleanLine = line.replace(/^\d+\.?\s*/, '').replace(/^[-*]\s*/, '').trim();
        if (cleanLine.length > 5) {
          items.push(cleanLine);
        }
      }
    }
    
    return items.slice(0, 10); // Limit to 10 items
  }

  private extractRecipeSteps(content: string): string[] {
    const steps: string[] = [];
    const lines = content.split('\n');
    
    for (const line of lines) {
      if (line.match(/^\d+\./) || line.includes('B∆∞·ªõc') || line.includes('b∆∞·ªõc')) {
        const cleanLine = line.replace(/^\d+\.?\s*/, '').replace(/^B∆∞·ªõc\s*\d+:\s*/, '').trim();
        if (cleanLine.length > 10) {
          steps.push(cleanLine);
        }
      }
    }
    
    return steps.slice(0, 8); // Limit to 8 steps
  }
}

// Export singleton instance
export const aiService = AIService.getInstance();
